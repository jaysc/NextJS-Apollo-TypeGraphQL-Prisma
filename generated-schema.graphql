# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregateUser {
  avg: UserAvgAggregateOutputType
  count: Int!
  max: UserMaxAggregateOutputType
  min: UserMinAggregateOutputType
  sum: UserSumAggregateOutputType
}

type BatchPayload {
  count: Int!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

enum OrderByArg {
  asc
  desc
}

type Query {
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): [User!]!
  Viewer: User!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  id: Int!
  name: String!
  status: String!
}

type UserAvgAggregateOutputType {
  id: Float!
}

input UserCreateInput {
  name: String!
  status: String!
}

type UserMaxAggregateOutputType {
  id: Int!
}

type UserMinAggregateOutputType {
  id: Int!
}

input UserOrderByInput {
  id: OrderByArg
  name: OrderByArg
  status: OrderByArg
}

type UserSumAggregateOutputType {
  id: Int!
}

input UserUpdateInput {
  name: String
  status: String
}

input UserUpdateManyMutationInput {
  name: String
  status: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  status: StringFilter
}

input UserWhereUniqueInput {
  id: Int
}
